---

- name: Create Kubernetes addon directory
  file: path={{ kube_addon_dir }} state=directory

- name: Copy Kubernetes proxy config file
  when: kube_proxy
  template: src=kube-proxy.yml.j2 dest={{ kube_addon_dir }}/kube-proxy.yml

- name: Copy Kubernetes dns config file
  when: kube_dns
  template: src=kube-dns.yml.j2 dest={{ kube_addon_dir }}/kube-dns.yml

- name: Copy kKubernetes monitoring config file
  when: kube_monitoring
  template: src=kube-monitoring.yml.j2 dest={{ kube_addon_dir }}/kube-monitoring.yml

- name: Copy Kubernetes logging config file
  when: kube_logging
  template: src=kube-logging.yml.j2 dest={{ kube_addon_dir }}/kube-logging.yml

- name: Copy Kubernetes dashboard config file
  when: kube_dashboard
  template: src=kube-dashboard.yml.j2  dest={{ kube_addon_dir }}/kube-dashboard.yml

- name: Copy Kubernetes watch config file
  when: kube_watch
  template: src=kube-watch.yml.j2  dest={{ kube_addon_dir }}/kube-watch.yml

- name: Check Kubernetes proxy is working
  when: kube_proxy
  shell: "kubectl get pods --all-namespaces=true | grep kube-proxy"
  delegate_to: "{{ groups['masters'][0] }}"
  run_once: true
  register: check_kube_proxy
  ignore_errors: True

- name: Create Kubernetes proxy addon
  when: kube_proxy and check_kube_proxy|failed
  shell: "kubectl apply --kubeconfig={{ kubeadmin_config }} -f {{ kube_addon_dir }}/kube-proxy.yml"
  delegate_to: "{{ groups['masters'][0] }}"
  run_once: true

- name: Check Kubernetes dns is working
  when: kube_dns
  shell: "kubectl get pods --all-namespaces=true | grep kube-dns"
  delegate_to: "{{ groups['masters'][0] }}"
  run_once: true
  register: check_dns
  ignore_errors: True

- name: Create Kubernetes dns addon
  when: kube_dns and check_dns|failed
  shell: "kubectl apply --kubeconfig={{ kubeadmin_config }} -f {{ kube_addon_dir }}/kube-dns.yml"
  delegate_to: "{{ groups['masters'][0] }}"
  run_once: true

- name: Check Kubernetes monitoring is working
  when: kube_monitoring
  shell: "kubectl get pods --all-namespaces=true | grep heapster"
  delegate_to: "{{ groups['masters'][0] }}"
  run_once: true
  register: check_monitoring
  ignore_errors: True

- name: Create Kubernetes monitoring addon
  when: kube_monitoring and check_monitoring|failed
  shell: "kubectl apply --kubeconfig={{ kubeadmin_config }} -f {{ kube_addon_dir }}/kube-monitoring.yml"
  delegate_to: "{{ groups['masters'][0] }}"
  run_once: true

- name: Check Kubernetes logging is working
  when: kube_logging
  shell: "kubectl get pods --all-namespaces=true | grep kibana-logging"
  delegate_to: "{{ groups['masters'][0] }}"
  run_once: true
  register: check_logging
  ignore_errors: True

- name: Create Kubernetes logging addon
  when: kube_logging and check_logging|failed
  shell: "kubectl apply --kubeconfig={{ kubeadmin_config }} -f {{ kube_addon_dir }}/kube-logging.yml"
  delegate_to: "{{ groups['masters'][0] }}"
  run_once: true

- name: Check Kubernetes dashboard is working
  when: kube_dashboard
  shell: "kubectl get pods --all-namespaces=true | grep kubernetes-dashboard"
  delegate_to: "{{ groups['masters'][0] }}"
  run_once: true
  register: check_dashboard
  ignore_errors: True

- name: Create Kubernetes dashboard addon
  when: kube_dashboard and check_dashboard|failed
  shell: "kubectl apply --kubeconfig={{ kubeadmin_config }} -f {{ kube_addon_dir }}/kube-dashboard.yml"
  delegate_to: "{{ groups['masters'][0] }}"
  run_once: true

- name: Check Kubernetes watch is working
  when: kube_watch
  shell: "kubectl get pods --all-namespaces=true | grep kubewatch"
  delegate_to: "{{ groups['masters'][0] }}"
  run_once: true
  register: check_watch
  ignore_errors: True

- name: Create Kubernetes watch addon
  when: kube_watch and check_watch|failed
  shell: "kubectl apply --kubeconfig={{ kubeadmin_config }} -f {{ kube_addon_dir }}/kube-watch.yml"
  delegate_to: "{{ groups['masters'][0] }}"
  run_once: true

---
- name: Create kubernetes addon directory
  file: path={{ kube_addon_dir }} state=directory
  register: addon_dir

- name: Copy kube-proxy config file
  when: kube_proxy
  template: src=kube-proxy.yaml.j2 dest={{ kube_addon_dir }}/kube-proxy.yaml

- name: Copy kube-dns config file
  when: kube_dns
  template: src=kube-dns.yaml.j2 dest={{ kube_addon_dir }}/kube-dns.yaml

- name: Copy weavnet and weavescope config file
  when: weave_net
  template: src={{ item.src }} dest={{ kube_addon_dir }}/{{ item.dest }}
  with_items:
    - { src: "weavenet.yaml.j2", dest: "weavenet.yaml" }
    - { src: "weavescopeui.yaml.j2", dest: "weavescopeui.yaml" }

- name: Copy kube-monitoring config file
  when: kube_monitoring
  template: src=kube-monitoring.yaml.j2 dest={{ kube_addon_dir }}/kube-monitoring.yaml

- name: Copy kube-logging config file
  when: kube_logging
  template: src=kube-logging.yaml.j2 dest={{ kube_addon_dir }}/kube-logging.yaml

- name: Copy kube-dash config file
  when: kube_dash
  template: src=kube-dash.yaml.j2  dest={{ kube_addon_dir }}/kube-dash.yaml

- name: Check kube-proxy
  when: kube_proxy
  shell: "kubectl get pods --all-namespaces=true | grep kube-proxy"
  delegate_to: "{{ groups['masters'][0] }}"
  run_once: true
  register: check_kube_proxy
  ignore_errors: True

- name: Create kube-proxy
  when: kube_proxy and check_kube_proxy|failed
  shell: "kubectl create --kubeconfig={{ kubeadmin_config }} -f {{ kube_addon_dir }}/kube-proxy.yaml"
  delegate_to: "{{ groups['masters'][0] }}"
  run_once: true

- name: Check weavenet
  when: weave_net
  shell: "kubectl get pods --all-namespaces=true | grep weave-net"
  delegate_to: "{{ groups['masters'][0] }}"
  run_once: true
  register: check_weavenet
  ignore_errors: True

- name: Create weavenet and weave-ui
  when: weave_net and check_weavenet|failed
  shell: "kubectl create --kubeconfig={{ kubeadmin_config }} -f {{ kube_addon_dir }}/{{ item }}"
  with_items:
    - "weavenet.yaml"
    - "weavescopeui.yaml"
  delegate_to: "{{ groups['masters'][0] }}"
  run_once: true

- name: Check kube-dns
  when: kube_dns
  shell: "kubectl get pods --all-namespaces=true | grep kube-dns"
  delegate_to: "{{ groups['masters'][0] }}"
  run_once: true
  register: check_dns
  ignore_errors: True

- name: Create kube-dns
  when: kube_dns and check_dns|failed
  shell: "kubectl create --kubeconfig={{ kubeadmin_config }} -f {{ kube_addon_dir }}/kube-dns.yaml"
  delegate_to: "{{ groups['masters'][0] }}"
  run_once: true

- name: Check kube-monitoring
  when: kube_monitoring
  shell: "kubectl get pods --all-namespaces=true | grep heapster"
  delegate_to: "{{ groups['masters'][0] }}"
  run_once: true
  register: check_monitoring
  ignore_errors: True

- name: Create kube-monitoring
  when: kube_monitoring and check_monitoring|failed
  shell: "kubectl create --kubeconfig={{ kubeadmin_config }} -f {{ kube_addon_dir }}/kube-monitoring.yaml"
  delegate_to: "{{ groups['masters'][0] }}"
  run_once: true

- name: Check kube-logging
  when: kube_logging
  shell: "kubectl get pods --all-namespaces=true | grep kibana-logging"
  delegate_to: "{{ groups['masters'][0] }}"
  run_once: true
  register: check_logging
  ignore_errors: True

- name: Create kube-logging
  when: kube_logging and check_logging|failed
  shell: "kubectl create --kubeconfig={{ kubeadmin_config }} -f {{ kube_addon_dir }}/kube-logging.yaml"
  delegate_to: "{{ groups['masters'][0] }}"
  run_once: true

- name: Check kube-dashboard
  when: kube_dash
  shell: "kubectl get pods --all-namespaces=true | grep kube-dashboard"
  delegate_to: "{{ groups['masters'][0] }}"
  run_once: true
  register: check_dash
  ignore_errors: True

- name: Create kube-dashboard
  when: kube_dash and check_dash|failed
  shell: "kubectl create --kubeconfig={{ kubeadmin_config }} -f {{ kube_addon_dir }}/kube-dash.yaml"
  delegate_to: "{{ groups['masters'][0] }}"
  run_once: true

---
- name: Check docker version not latest
  when: docker_version == 'latest'
  fail: msg="The source install type not support 'latest' version tag."

- name: Create docker release directory
  file: path="{{ docker_dir }}" state=directory

- name: Check docker tar file already exists
  stat:
    path: "{{ tmp_dir }}/docker-{{ docker_version }}.tgz"
  register: check_docker

- name: Download docker tar file
  when: not check_docker.stat.exists
  get_url:
    url: "{{ docker_download_url }}"
    dest: "{{ tmp_dir }}"
    validate_certs: False
  register: docker_download

- name: Extract docker tar file to bin
  when: docker_download|succeeded
  unarchive:
    src: "{{ tmp_dir }}/docker-{{ docker_version }}.tgz"
    dest: "{{ docker_dir }}"
    copy: no
    extra_opts: ['--strip-components=1']
    owner: root
    mode: 0775

- name: Find all docker bin file
  ignore_errors: True
  shell: "ls {{ docker_dir }} | grep -o 'docker.*'"
  register: docker_bins

- name: Create docker component symlinks
  file:
    src: "{{ docker_dir }}/{{ item }}"
    dest: "/usr/bin/{{ item }}"
    state: link
    force: yes
  with_items: "{{ docker_bins.stdout_lines|list }}"
